fn main() {
  // ! 面向对象语言的特征
  // ! 对象包含数据和行为
  // ! 封装隐藏了实现细节
  // ! 继承，作为类型系统与代码共享
  // * 继承（Inheritance）是一个很多编程语言都提供的机制，一个对象可以定义为继承另一个对象的定义，这使其可以获得父对象的数据和行为，而无需重新定义
  // * 多态（Polymorphism）很多人将多态描述为继承的同义词。不过它是一个有关可以用于多种类型的代码的更广泛的概念。对于继承来说，这些类型通常是子类。 Rust 则通过泛型来对不同的可能类型进行抽象，
  // * 并通过 trait bounds 对这些类型所必须提供的内容施加约束。这有时被称为 bounded parametric polymorphism

  // 顾及不同类型值的 trait 对象
  println!("Hello, world!");
}
